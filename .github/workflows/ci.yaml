name: CI/CD Monorepo

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  # Job 1: Build both applications in parallel
  build_apps:
    name: Build ${{ matrix.app }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [client, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'
          # Cache is based on the single, root package-lock.json
          cache-dependency-path: './package-lock.json'

      - name: Install All Dependencies
        # Run from the root of the monorepo
        run: npm ci

      - name: Build Workspace '${{ matrix.app }}'
        # Use the --workspace flag to target the specific app
        run: npm run build --workspace=${{ matrix.app }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact name is the same
          name: dist-${{ matrix.app }}
          # The path is now inside the apps/* directory
          path: ./apps/${{ matrix.app }}/dist/
          retention-days: 1

  # Job 2: Create a new version number (no changes needed here)
  create_version:
    name: Create Version
    runs-on: ubuntu-latest
    needs: build_apps
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      version: ${{ steps.semantic-release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      
      - name: Run Semantic Release
        id: semantic-release
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-file: "package.json"

  # Job 3: Build and Push Docker images in parallel
  build_and_push_docker:
    name: Dockerize ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: create_version
    strategy:
      matrix:
        app: [client, api]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download the artifact into the correct sub-directory
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.app }}
          path: ./apps/${{ matrix.app }}/dist/

      - name: show contents
        run: cd apps/${{ matrix.app }} && ls -la
      - name: show dist
        run: cd apps/${{ matrix.app }}/dist && ls -la

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image for ${{ matrix.app }}
        uses: docker/build-push-action@v5
        with:
          # IMPORTANT: The context is now the root of the repo for the api Dockerfile to work
          context: ./apps/${{ matrix.app }}
          # We point to the specific Dockerfile for each app
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/tasks-notes-${{ matrix.app }}:${{ needs.create_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Deploy to Kubernetes (no changes needed here)
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [create_version, build_and_push_docker]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up K8s context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Set up Helm
        uses: azure/setup-helm@v4
      - name: Deploy with Helm
        run: |
          helm upgrade --install my-app-release ./charts/my-app \
            --namespace production \
            --create-namespace \
            --wait \
            --set client.image.tag=${{ needs.create_version.outputs.version }} \
            --set api.image.tag=${{ needs.create_version.outputs.version }}