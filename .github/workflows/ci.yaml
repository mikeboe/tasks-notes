name: CI/CD Monorepo

on:
    push:
        branches:
            - main

env:
    REGISTRY: ghcr.io
    IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
    # Job 1: Build both applications in parallel (No changes here)
    build_apps:
        name: Build ${{ matrix.app }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                app: [client, api]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"
                  cache: "npm"
                  cache-dependency-path: "./package-lock.json"

            - name: Install All Dependencies
              run: npm ci

            - name: Build Workspace '${{ matrix.app }}'
              run: npm run build --workspace=${{ matrix.app }}

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ matrix.app }}
                  path: ./apps/${{ matrix.app }}/dist/
                  retention-days: 1

    # Job 2: Create a new version number
    create_version:
        name: Create Version
        runs-on: ubuntu-latest
        needs: build_apps
        permissions:
            contents: write
            issues: write
            pull-requests: write
        outputs:
            version: ${{ steps.semantic-release.outputs.version }} 
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"

            - name: Run Semantic Release
              id: semantic-release
              uses: go-semantic-release/action@v1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  update-file: "package.json"

    # Job 3: Build and Push MULTI-PLATFORM Docker images in parallel
    build_and_push_docker:
        name: Dockerize ${{ matrix.app }}
        runs-on: ubuntu-latest
        needs: create_version
        strategy:
            matrix:
                app: [client, api]
        permissions:
            contents: read
            packages: write
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ matrix.app }}
                  path: ./apps/${{ matrix.app }}/dist/

            - name: Set up QEMU for multi-platform builds
              # <--- ADD THIS STEP
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to the Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image for ${{ matrix.app }}
              uses: docker/build-push-action@v5
              with:
                  context: ./apps/${{ matrix.app }}
                  file: ./apps/${{ matrix.app }}/Dockerfile
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/tasks-notes-${{ matrix.app }}:${{ needs.create_version.outputs.version }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # Job 4: Deploy to Kubernetes
    deploy:
        name: Deploy to Kubernetes
        runs-on: ubuntu-latest
        needs: [create_version, build_and_push_docker]
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up K8s context
              uses: azure/k8s-set-context@v3
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG }}
            - name: Set up Helm
              uses: azure/setup-helm@v4
            - name: Deploy with Helm
              run: |
                  helm upgrade --install tasks-notes ./k8s/chart \
                    --namespace tasks-notes \
                    --create-namespace \
                    --wait \
                    --set client.image.tag=${{ needs.create_version.outputs.version }} \
                    --set api.image.tag=${{ needs.create_version.outputs.version }} \
                    --set api.env.DATABASE_URL=${{ secrets.DATABASE_URL }} \
                    --set api.env.JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }} \
                    --set api.env.JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}